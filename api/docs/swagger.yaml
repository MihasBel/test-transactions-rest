---
swagger: "2.0"
info:
  description: "This is a test task for the implementation of a transaction system. It accepts requests to deposit or withdraw money and enters them into the database. It also gives transaction data from the database when requesting information on any transaction. 
    \  For this sample, you can use the api key `1234` to test. 
    Project repository [github](https://github.com/MihasBel/test-transactions)"
    
  version: "1.0.6"
  title: "Test Transactions"
  
host: "localhost:8080"
basePath: "/api/v1"
tags:
- name: "transactions"
  description: "Manage transactions"
  
security:
  - api_key: []
schemes:
- "https"
- "http"
paths:
  /:
    post:
      tags:
      - "transactions"
      summary: "Place a transaction"
      description: ""
      operationId: "placeTransaction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "model with user id and delta"
        required: true
        schema:
          $ref: "#/definitions/TPostParam"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
        400:
          description: "Invalid transaction"
  
  /balance/{userId}:
    get:
      tags:
      - "transactions"
      summary: "Find current balance by user ID"
      description: ""
      operationId: "getBalanceByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Balance"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Balance not found"
  /history/{userId}:
    get:
      tags:
      - "transactions"
      summary: "Find current balance by user ID"
      description: ""
      operationId: "getHistory"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BalanceHistory"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Balance not found"

  /byID/{transactionId}:
    get:
      tags:
      - "transactions"
      summary: "Find transaction by transaction ID"
      description: ""
      operationId: "getTransaction"
      produces:
      - "application/json"
      parameters:
      - name: "transactionId"
        in: "path"
        description: "ID of the transaction"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Transaction not found"          

  /byTime/:
    get:
      tags:
      - "transactions"
      summary: "Find transaction by created time"
      description: "Ð¡an search only among transactions of a certain user"
      operationId: "getTransactionByTime"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "ID of the user"
        required: true
        type: "string"
      - name: "tTime"
        in: "query"
        description: "ID of the user"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
        400:
          description: "Invalid ID or time supplied"
        404:
          description: "Transaction not found"          
  
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Authrorization"
    in: "header"
  
definitions:
  
  BalanceHistory:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "string"
      amount:
        type: "integer"
        format: "int64"
      tranHistory:
        type: array
        items:
          $ref: '#/definitions/Transaction'
  Balance:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "string"
      amount:
        type: "integer"
        format: "int64"
          
     
  TPostParam:
    type: "object"
    properties:
      userId:
        type: "string"
      delta:
        type: "integer"
        format: "int64"
        description: "To reduce the balance, provide a negative integer, and a positive integer to increase. Must be different from zero"
    
  Transaction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "string"
      balanceId:
        type: "integer"
        format: "int64"
      delta:
        type: "integer"
        format: "int64"
      time:
        type: "string"
        format: "date-time"
      