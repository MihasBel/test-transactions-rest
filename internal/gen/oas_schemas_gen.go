// Code generated by ogen, DO NOT EDIT.

package gen

import (
	"time"

	"github.com/google/uuid"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// GetTransactionByIdBadRequest is response for GetTransactionById operation.
type GetTransactionByIdBadRequest struct{}

func (*GetTransactionByIdBadRequest) getTransactionByIdRes() {}

// GetTransactionByIdNotFound is response for GetTransactionById operation.
type GetTransactionByIdNotFound struct{}

func (*GetTransactionByIdNotFound) getTransactionByIdRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PlaceTransactionAccepted struct {
	// The transaction ID.
	ID OptUUID `json:"id"`
}

// GetID returns the value of ID.
func (s *PlaceTransactionAccepted) GetID() OptUUID {
	return s.ID
}

// SetID sets the value of ID.
func (s *PlaceTransactionAccepted) SetID(val OptUUID) {
	s.ID = val
}

func (*PlaceTransactionAccepted) placeTransactionRes() {}

// PlaceTransactionBadRequest is response for PlaceTransaction operation.
type PlaceTransactionBadRequest struct{}

func (*PlaceTransactionBadRequest) placeTransactionRes() {}

// Ref: #/components/schemas/TPostParam
type TPostParam struct {
	// To reduce the balance, provide a negative integer, and a positive integer to increase. Must be
	// different from zero.
	Amount OptInt64 `json:"amount"`
}

// GetAmount returns the value of Amount.
func (s *TPostParam) GetAmount() OptInt64 {
	return s.Amount
}

// SetAmount sets the value of Amount.
func (s *TPostParam) SetAmount(val OptInt64) {
	s.Amount = val
}

// Ref: #/components/schemas/Transaction
type Transaction struct {
	ID          OptUUID     `json:"id"`
	UserID      OptUUID     `json:"user_id"`
	Amount      OptInt64    `json:"amount"`
	Status      OptInt64    `json:"status"`
	CreatedAt   OptDateTime `json:"created_at"`
	Description OptString   `json:"description"`
}

// GetID returns the value of ID.
func (s *Transaction) GetID() OptUUID {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Transaction) GetUserID() OptUUID {
	return s.UserID
}

// GetAmount returns the value of Amount.
func (s *Transaction) GetAmount() OptInt64 {
	return s.Amount
}

// GetStatus returns the value of Status.
func (s *Transaction) GetStatus() OptInt64 {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Transaction) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetDescription returns the value of Description.
func (s *Transaction) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *Transaction) SetID(val OptUUID) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Transaction) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetAmount sets the value of Amount.
func (s *Transaction) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetStatus sets the value of Status.
func (s *Transaction) SetStatus(val OptInt64) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Transaction) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetDescription sets the value of Description.
func (s *Transaction) SetDescription(val OptString) {
	s.Description = val
}

func (*Transaction) getTransactionByIdRes() {}
